__PREMIER RAFFINAGE
Algorithme Serveur
    /* Rôle : Gérer les connexions clients*/
    Constante
        AUTHENTIFICATION_OK <- 200
        TERMINE <- 000
    Variable
        connexion : socket
        requete : typeRequete
        reponse : typeReponse
        code_erreur : entier
    Début
        TantQue(Vrai) Faire
            # attente de connexion
            connexion <- attenteConnexion()

            # authentification de l'utilisateur
            Faire
                requete <- ecouterPort(connexion)
                reponse <- authentification(connexion, requete)
                envoyer_reponse(connexion, reponse)
            TantQue(connexion != AUTHENTIFICATION_OK)

            # traitement de la requete
            TantQue(connexion != TERMINE) Faire
                requete <- ecouterPort(connexion)
                reponse <- traiterRequete(connexion, requete)
                envoyer_reponse(connexion, reponse)
            
            deconnecter(connexion)

        TantQue(Vrai) Faire
            # utilisateur choisi une action
            action <-
while true:
    #user chooses an action
    action = getAction()

    #request is built
    request = buildRequest(action)

    #and sent to the server
    send_request(request)

    #then the client displays success or failure
    error_code = listenForRequest()
    display(error_code)


__SECOND RAFFINAGE

function auth(connexion, request):
    #check if type is AUTH or QUIT
    #if QUIT then stop there
    #else:
        #check hash and user from request
        #if correct :
            #designate the connexion has authentified
            return error_code
        #else:
            #return auth error



function add():
    #case user:
        #check if connexion is admin
        #check if user exists
        #add new user and directory file path to the users file
        #create new directory file
        #return error_code
    
    #case contact:
        #open user's directory file
        #check if contact doesn't already exists
        #add contact to file
        #return error_code



function delete():
    #case user:
        #check if user exists
        #delete user from file
        #delete linked directory
        #return error_code
    #case contact:
        #open user's directory
        #check if contact exists
        #delete contact from the directory
        #return error_code


function edit():
    #check if contact exists in user's directory
    #edit the contact's properties
    #return error_code 


function get():
    #case directory:
        #check if directory/user exists
        #check if user has permission
        #open the directory
        #send content to client
        #return error_code

    #case contact:
        #check if directory exists
        #check if contact exists
        #check if user has permission
        #open the directory
        #send contact's content to client
        #return error_code

    #case allowed directories:
        #send list of directories to client
        return error_code


function allow():
    #check if users exist
    #for each user:
        #add permission to user
    #return error_code


function search():
    #check if contact exists
    #send contact info to client
    #return error_code


function quit():
    #stop the connexion
    #return error_code


function process(request):
    #case ADD:
        #return add(request)
    #case DELETE:
        #return delete(request)
    #case EDIT:
        #return edit(request)
    #case GET:
        #return get(request)
    #case ALLOW:
        #return allow(request)
    #case SEARCH:
        #return search(request)
    #case QUIT:
        quit()
